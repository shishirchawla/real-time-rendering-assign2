##########################################################
# Name - Shishir Chawla                                  #
# Student Number - s3253078                              #
# Assignment 2 RealTime Rendering                        #
#                                                        #
##########################################################

README

VISUALS AND PERFORMANCE
-----------------------

1. No difference to be seen between fixed pipeline and shader lighting with options set to 
   blinn-phong lighting model and per vertex lighting in shader. Opengl fixed pipeline seems to 
   use per vertex lighting and uses half vector for lighting calculations.
2. Difference is negligible with lower tesselation. With sufficiently high tesselation, shader
   lighting has a much worse frame rate compared to fixed pipeline. Fixed pipeline frame rate
   is greater than double the frame rate achieved with shader lighting. With even higher 
   tesselation, with 1000+ stacks and slices, shader seems to perform 
   better than fixed pipeline, with almost 1.5 times the frame rate achieved with fixed pipeline. 
   ->Fixed pipeline frame rate > 2 * shader frame rate (stacks and slices < 1000(each)).
   ->Shader frame rate equivalent to 1.3 times the frame rate with fixed pipeline 
      (stacks and slices > 1000 (each).
3. No/negligible performance difference is seen when comparing geometry calculation of sphere 
   and torus with the grid in shaders and this is what I observed in the sutherland labs. Although on 
   testing on my own mac, I seem to get few extra frames with the grid. It is noticeable when the 
   tesselation is neither too low and nor too high. With A very high tesselation only a few extra 
   frames are achieved when rendering the grid.
4. No performance difference is seen in terms of calculating lighting. But on my mac, and I have not 
   tested this on a sutherland machine, per pixel/frament shader gives out better performance in geometry
   calculations. Again this is more noticeable when the tessellation is neither too high nor too low.
   In the main program, I am calculating geometry on vertex shader only(always) for reducing load 
   on the fragment shader.

FUNCTIONALITY
-------------
All functionality has been implemented.
